links
bind_rows(links)
bind_cols(links)
unlist(links)
class(links)
links
links[[1]]
links[[1]]$links
links[[1]]$links %>% bind_rows()
links[[1]]$links %>% bind_cols()
links[[1]]$links %>% bind_rows()
?bind_rows
unlist(links) %>% as.character() %>% str_subset("[^0]")
links[[1]]$links
links[[1]]$links$title
links[[1]]$links
links[[1]]$links[[1]]
links[[1]]$links[[1]] %>% class
do.call(rbind.data.frame, links[[1]]$links)
do.call(rbind_fill, links[[1]]$links)
bind_cols(links[[1]]$links)
bind_rows(links[[1]]$links)
names(links[[1]]$links)
foo <- links[[1]]$links
names(foo) <- 1:length(foo)
bind_rows(foo)
bind_cols(foo)
lapply(links[[1]]$links, "[", 2)
lapply(links[[1]]$links, "[", 2) %>% unlist
# get page backlinks (links referring to a given web resource; careful: max 500 backlinks)
backlinks <- page_backlinks("de","wikipedia", page = "Brandenburger_Tor", clean_response = TRUE, limit = 500, namespaces = 0)
unlist(backlinks) %>%  .[names(.) == "title"] %>% as.character
# get external links
extlinks <- page_external_links("de","wikipedia", page = "Brandenburger_Tor", clean_response = TRUE, limit = 500)
extlinks[[1]]$extlinks
# metadata on article
metadata <- page_info("de","wikipedia", page = "Brandenburger_Tor", clean_response = TRUE)
metadata[[1]] %>% t() %>% as.data.frame
# which categories in page
cats <- categories_in_page("de","wikipedia", page = "Brandenburger_Tor", clean_response = TRUE)
cats[[1]]$categories
# get pageviews
dat <- wp_trend(page = "Elster", language = "de", from = "2007-01-01", to = Sys.Date())
# get pageviews
dat <- wp_trend(page = "Elster", lang = "de", from = "2007-01-01", to = Sys.Date())
head(dat)
plot(ymd(dat$date), dat$views, type = "l", ylim = c(min(dat$views), 2000), xaxt = "n", yaxt = "n", xlab = "", ylab = "Page views", col = "white")
abline(h = seq(0, 2000, 500), col = "lightgrey")
lines(ymd(dat$date), dat$views, lwd = .5)
# plot
par(oma=c(0,0,0,0))
par(mar=c(0,4,0,.5))
par(yaxs="i", xaxs="i", bty="n")
# page views time series
par(mar=c(2,4,1,.5))
plot(ymd(dat$date), dat$views, type = "l", xaxt = "n", yaxt = "n", xlab = "", ylab = "Page views", col = "white")
abline(h = seq(0, 2000, 500), col = "lightgrey")
lines(ymd(dat$date), dat$views, lwd = .5)
abline(h = seq(0, max(dat$views), 500), col = "lightgrey")
lines(ymd(dat$date), dat$views, lwd = .5)
dates <- seq(ymd("2007-01-01"), ymd("2018-09-01"), by = 365)
axis(1, dates[day(dates) == 1 & month(dates) %in% c(1,4,7,10)], labels = FALSE)
axis(1, dates[day(dates) == 1 & month(dates) %in% c(1)], lwd = 0, lwd.ticks = 2, labels = FALSE)
dates
axis(2, seq(0, max(dat$views), 500), seq(0, max(dat$views), 500), las = 2)
dates <- seq("2007-01-01", Sys.Date, by = 365)
ymd(Sys.Date)
ymd(Sys.Date())
dates <- seq(ymd("2007-01-01)", ymd(Sys.Date()), by = 365)
dates <- seq(ymd("2007-01-01"), ymd(Sys.Date()), by = 365)
dates
axis(1, dates[day(dates) == 1 & month(dates) %in% c(1,4,7,10)], labels = FALSE)
axis(1, dates[day(dates) == 1 & month(dates) %in% c(1)], lwd = 0, lwd.ticks = 2, labels = FALSE)
axis(1, dates[day(dates) == 1 & month(dates) %in% c(7)], labels = as.character(year(dates[day(dates) == 15 & month(dates) %in% c(7)])), tick = F, lwd = 0)
axis(2, seq(0, max(dat$views), 500), seq(0, max(dat$views), 500), las = 2)
plot(ymd(dat$date), dat$views, type = "l", xlab = "", ylab = "Page views", col = "white")
# plot
par(oma=c(0,0,0,0))
par(mar=c(0,4,0,.5))
par(yaxs="i", xaxs="i", bty="n")
# page views time series
par(mar=c(2,4,1,.5))
plot(ymd(dat$date), dat$views, type = "l", xlab = "", ylab = "Page views", col = "white")
abline(h = seq(0, max(dat$views), 500), col = "lightgrey")
lines(ymd(dat$date), dat$views, lwd = .5)
sort(dat$views)
dat <- filter(dat, dat$views != 0)
# plot
par(oma=c(0,0,0,0))
par(mar=c(0,4,0,.5))
par(yaxs="i", xaxs="i", bty="n")
# page views time series
par(mar=c(2,4,1,.5))
plot(ymd(dat$date), dat$views, type = "l", xlab = "", ylab = "Page views", col = "white")
abline(h = seq(0, max(dat$views), 500), col = "lightgrey")
lines(ymd(dat$date), dat$views, lwd = .5)
dat$date
rev(dat$date)
dev.off()
# plot
par(oma=c(0,0,0,0))
par(mar=c(0,4,0,.5))
par(mar=c(2,4,1,.5))
plot(ymd(dat$date), dat$views, type = "l", xlab = "", ylab = "Page views", col = "white")
abline(h = seq(0, max(dat$views), 500), col = "lightgrey")
par(yaxs="i", xaxs="i", bty="n")
# page views time series
par(mar=c(2,4,1,.5))
plot(ymd(dat$date), dat$views, type = "l", xlab = "", ylab = "Page views", col = "white")
abline(h = seq(0, max(dat$views), 500), col = "lightgrey")
abline(v = ymd(paste0(2008:2018)), col = "lightgrey")
# plot
par(oma=c(0,0,0,0))
par(mar=c(0,4,0,.5))
par(yaxs="i", xaxs="i")
# page views time series
par(mar=c(2,4,1,.5))
plot(ymd(dat$date), dat$views, type = "l", xlab = "", ylab = "Page views", col = "white")
abline(h = seq(0, max(dat$views), 500), col = "lightgrey")
abline(v = ymd(paste0(2008:2018)), col = "lightgrey")
# plot
par(oma=c(0,0,0,0))
par(mar=c(0,4,0,.5))
# page views time series
par(mar=c(2,4,1,.5))
plot(ymd(dat$date), dat$views, type = "l", xlab = "", ylab = "Page views", col = "white")
abline(h = seq(0, max(dat$views), 500), col = "lightgrey")
abline(v = ymd(paste0(2008:2018)), col = "lightgrey")
# get pageviews
dat <- wp_trend(page = "Elster", lang = "de", from = "2007-01-01", to = Sys.Date())
dat <- filter(dat, dat$views != 0)
# plot
par(oma=c(0,0,0,0))
par(mar=c(0,4,0,.5))
# page views time series
par(mar=c(2,4,1,.5))
plot(ymd(dat$date), dat$views, type = "l", xlab = "", ylab = "Page views", col = "white")
abline(h = seq(0, max(dat$views), 500), col = "lightgrey")
abline(v = ymd(paste0(2008:2018)), col = "lightgrey")
paste0(2008:2018), "-05-31")
paste0(2008:2018, "-05-31")
abline(v = ymd(paste0(2008:2019), "-05-31")), col = "lightgrey")
abline(v = ymd(paste0(2008:2019, "-05-31")), col = "lightgrey")
# plot
par(oma=c(0,0,0,0))
par(mar=c(0,4,0,.5))
# page views time series
par(mar=c(2,4,1,.5))
plot(ymd(dat$date), dat$views, type = "l", xlab = "", ylab = "Page views", col = "white")
abline(h = seq(0, max(dat$views), 500), col = "lightgrey")
abline(v = ymd(paste0(2008:2019, "-05-31")), col = "red", lty = 2)
lines(ymd(dat$date), dat$views, lwd = .5)
# plot
par(oma=c(0,0,0,0))
par(mar=c(0,4,0,.5))
# page views time series
par(mar=c(2,4,1,.5))
plot(ymd(dat$date), dat$views, type = "l", xlab = "", ylab = "Page views", col = "white")
abline(h = seq(0, max(dat$views), 500), col = "lightgrey")
abline(v = ymd(paste0(2008:2019, "-05-31")), col = "red", lty = 2)
lines(ymd(dat$date), dat$views, lwd
dev.off()
# get pageviews
dat <- wp_trend(page = "Elster", lang = "de", from = "2007-01-01", to = Sys.Date())
dat <- filter(dat, dat$views != 0)
# plot
par(oma=c(0,0,0,0))
par(mar=c(0,4,0,.5))
# page views time series
par(mar=c(2,4,1,.5))
plot(ymd(dat$date), dat$views, type = "l", xlab = "", ylab = "Page views", col = "white")
abline(h = seq(0, max(dat$views), 500), col = "lightgrey")
abline(v = ymd(paste0(2008:2019, "-05-31")), col = "red", lty = 2)
lines(ymd(dat$date), dat$views, lwd = .5)
dat <- filter(dat, dat$views != 0, dat$views < 4000)
# get pageviews on "Elster" article
dat <- wp_trend(page = "Elster", lang = "de", from = "2007-01-01", to = Sys.Date())
dat <- filter(dat, dat$views != 0, dat$views < 4000)
# plot
par(oma=c(0,0,0,0))
par(mar=c(0,4,0,.5))
# page views time series
par(mar=c(2,4,1,.5))
plot(ymd(dat$date), dat$views, type = "l", xlab = "", ylab = "Page views", col = "white")
abline(h = seq(0, max(dat$views), 500), col = "lightgrey")
abline(v = ymd(paste0(2008:2019, "-05-31")), col = "red", lty = 2)
lines(ymd(dat$date), dat$views, lwd = .5)
# get data
ger_traffic <- right_join(x = get_traffic(legislature = "germany"),
y = filter(get_political(legislature = "germany"), session_end >= as.Date("2015-07-01")),
by = "pageid")
ger_traffic <- left_join(x = ger_traffic,
y = get_core(legislature = "germany"),
by = "pageid")
ger_traffic <- dplyr::select(ger_traffic, pageid, date, traffic, session, party, name)
# aggregate data
ger_traffic$date <- ymd(ger_traffic$date)
ger_traffic_date <- group_by(ger_traffic, date)
ger_traffic_legislators <- group_by(ger_traffic, pageid)
ger_traffic_sum <- summarize(ger_traffic_date, mean = mean(traffic, na.rm = TRUE))
ger_traffic_sum <- mutate(ger_traffic_sum,
mean_l1 = lag(mean, 1),
mean_f1 = lead(mean, 1),
peak = (mean >= 1.8*mean_l1 & mean > 180))
# identify peaks
ger_traffic_peaks <- filter(ger_traffic_sum, peak == TRUE)
ger_traffic_peaks_df <- filter(ger_traffic, date %in% ger_traffic_peaks$date)
ger_traffic_peaks_group <- group_by(ger_traffic_peaks_df, date) %>% dplyr::arrange(desc(traffic)) %>% filter(row_number()==1)
ger_traffic_peaks_group <- arrange(ger_traffic_peaks_group, date)
events_vec <- c("deceased", "drug affair", "bullying affair", "candidacy for presidency", "deceased", "???", "chancellorchip announcement", "elected president", "???", "policy success", "TV debate", "general election", "threat to resign", "elected speaker of parliament")
# get data
ger_traffic <- right_join(x = get_traffic(legislature = "deu"),
y = filter(get_political(legislature = "deu"), session_end >= as.Date("2015-07-01")),
by = "pageid")
ger_traffic <- left_join(x = ger_traffic,
y = get_core(legislature = "deu"),
by = "pageid")
ger_traffic <- dplyr::select(ger_traffic, pageid, date, traffic, session, party, name)
# aggregate data
ger_traffic$date <- ymd(ger_traffic$date)
ger_traffic_date <- group_by(ger_traffic, date)
ger_traffic_legislators <- group_by(ger_traffic, pageid)
ger_traffic_sum <- summarize(ger_traffic_date, mean = mean(traffic, na.rm = TRUE))
ger_traffic_sum <- mutate(ger_traffic_sum,
mean_l1 = lag(mean, 1),
mean_f1 = lead(mean, 1),
peak = (mean >= 1.8*mean_l1 & mean > 180))
# identify peaks
ger_traffic_peaks <- filter(ger_traffic_sum, peak == TRUE)
ger_traffic_peaks_df <- filter(ger_traffic, date %in% ger_traffic_peaks$date)
ger_traffic_peaks_group <- group_by(ger_traffic_peaks_df, date) %>% dplyr::arrange(desc(traffic)) %>% filter(row_number()==1)
ger_traffic_peaks_group <- arrange(ger_traffic_peaks_group, date)
events_vec <- c("deceased", "drug affair", "bullying affair", "candidacy for presidency", "deceased", "???", "chancellorchip announcement", "elected president", "???", "policy success", "TV debate", "general election", "threat to resign", "elected speaker of parliament")
par(oma=c(0,0,0,0))
par(mar=c(0,4,0,.5))
par(yaxs="i", xaxs="i", bty="n")
layout(matrix(c(1,1,3,2,2,3), 2, 3, byrow = TRUE), heights = c(1,2,3), widths = c(5, 5, 1.8))
# names labels
plot(ymd(ger_traffic_sum$date), rep(0, length(ger_traffic_sum$date)), xlim = c(ymd("2015-07-01"), ymd("2018-01-01")), xaxt = "n", ylim = c(0, 10), yaxt = "n", xlab = "", ylab = "", cex = 0)
text(ger_traffic_peaks_group$date, 0, ger_traffic_peaks_group$name, cex = .75, srt = 90, adj = c(0, 0))
# page views time series
par(mar=c(2,4,0,.5))
plot(ymd(ger_traffic_sum$date), ger_traffic_sum$mean, type = "l", ylim= c(0, 1.25*max(ger_traffic_sum$mean)), xlim = c(ymd("2015-07-01"), ymd("2018-01-01")),  xaxt = "n", yaxt = "n", xlab = "", ylab = "mean(page views)", col = "white")
#abline(v = dates[day(dates) == 1 & month(dates) %in% c(1)], col = "lightgrey")
abline(h = seq(0, 1.5*max(ger_traffic_sum$mean), 250), col = "lightgrey")
lines(ymd(ger_traffic_sum$date), ger_traffic_sum$mean, lwd = .5)
dates <- seq(ymd("2015-07-01"), ymd("2018-01-01"), by = 1)
axis(1, dates[day(dates) == 1 & month(dates) %in% c(1,4,7,10)], labels = FALSE)
axis(1, dates[day(dates) == 1 & month(dates) %in% c(1)], lwd = 0, lwd.ticks = 3, labels = FALSE)
axis(1, dates[day(dates) == 1 & month(dates) %in% c(7)], labels = as.character(year(dates[day(dates) == 15 & month(dates) %in% c(7)])), tick = F, lwd = 0)
axis(2, seq(0, 1.5*max(ger_traffic_sum$mean), 250), las = 2)
# events labels in time series
for(i in seq_along(events_vec)) {
text(ger_traffic_peaks_group$date[i], ger_traffic_sum$mean[ger_traffic_sum$peak == TRUE][i] + 80, i, cex = .8)
points(ger_traffic_peaks_group$date[i], ger_traffic_sum$mean[ger_traffic_sum$peak == TRUE][i] + 80, pch=1, cex = 2.2)
}
# election date
# abline(v = ymd("2017-09-24"), lty = 2, col = "darkgrey")
# events labels explained
par(mar=c(0,0,0,0))
plot(0, 0, xlim = c(0, 5), ylim = c(0, 10), xaxt = "n", yaxt = "n", xlab = "", ylab = "", cex = 0)
positions <- data.frame(events_xpos = 0.45, events_ypos = seq(8.5, (8.5 - .5*length(events_vec)), -.5), text_xpos = .5)
text(0, 9, "Events", pos = 4, cex = .75)
for(i in seq_along(events_vec)) {
text(positions$events_xpos[i], positions$events_ypos[i], i, cex = .8)
points(positions$events_xpos[i], positions$events_ypos[i], pch = 1, cex = 2.2)
text(positions$text_xpos[i], positions$events_ypos[i], events_vec[i], pos = 4, cex = .75)
}
## Visualize average pageviews data of German MPs -----------------------------
# get data
ger_traffic <- right_join(x = get_traffic(legislature = "deu"),
y = filter(get_political(legislature = "deu"), session_end >= as.Date("2015-07-01")),
by = "pageid")
ger_traffic <- left_join(x = ger_traffic,
y = get_core(legislature = "deu"),
by = "pageid")
ger_traffic <- dplyr::select(ger_traffic, pageid, date, traffic, session, party, name)
# aggregate data
ger_traffic$date <- ymd(ger_traffic$date)
ger_traffic_date <- group_by(ger_traffic, date)
ger_traffic_legislators <- group_by(ger_traffic, pageid)
ger_traffic_sum <- summarize(ger_traffic_date, mean = mean(traffic, na.rm = TRUE))
ger_traffic_sum <- mutate(ger_traffic_sum,
mean_l1 = lag(mean, 1),
mean_f1 = lead(mean, 1),
peak = (mean >= 1.8*mean_l1 & mean > 180))
# identify peaks
ger_traffic_peaks <- filter(ger_traffic_sum, peak == TRUE)
ger_traffic_peaks_df <- filter(ger_traffic, date %in% ger_traffic_peaks$date)
ger_traffic_peaks_group <- group_by(ger_traffic_peaks_df, date) %>% dplyr::arrange(desc(traffic)) %>% filter(row_number()==1)
ger_traffic_peaks_group <- arrange(ger_traffic_peaks_group, date)
events_vec <- c("deceased", "drug affair", "bullying affair", "candidacy for presidency", "deceased", "???", "chancellorchip announcement", "elected president", "???", "policy success", "TV debate", "general election", "threat to resign", "elected speaker of parliament")
par(oma=c(0,0,0,0))
par(mar=c(0,4,0,.5))
par(yaxs="i", xaxs="i", bty="n")
layout(matrix(c(1,1,3,2,2,3), 2, 3, byrow = TRUE), heights = c(1,2,3), widths = c(5, 5, 1.8))
# names labels
plot(ymd(ger_traffic_sum$date), rep(0, length(ger_traffic_sum$date)), xlim = c(ymd("2015-07-01"), ymd("2018-01-01")), xaxt = "n", ylim = c(0, 10), yaxt = "n", xlab = "", ylab = "", cex = 0)
text(ger_traffic_peaks_group$date, 0, ger_traffic_peaks_group$name, cex = .75, srt = 90, adj = c(0, 0))
# page views time series
par(mar=c(2,4,0,.5))
plot(ymd(ger_traffic_sum$date), ger_traffic_sum$mean, type = "l", ylim= c(0, 1.25*max(ger_traffic_sum$mean)), xlim = c(ymd("2015-07-01"), ymd("2018-01-01")),  xaxt = "n", yaxt = "n", xlab = "", ylab = "mean(page views)", col = "white")
#abline(v = dates[day(dates) == 1 & month(dates) %in% c(1)], col = "lightgrey")
abline(h = seq(0, 1.5*max(ger_traffic_sum$mean), 250), col = "lightgrey")
lines(ymd(ger_traffic_sum$date), ger_traffic_sum$mean, lwd = .5)
dates <- seq(ymd("2015-07-01"), ymd("2018-01-01"), by = 1)
axis(1, dates[day(dates) == 1 & month(dates) %in% c(1,4,7,10)], labels = FALSE)
axis(1, dates[day(dates) == 1 & month(dates) %in% c(1)], lwd = 0, lwd.ticks = 3, labels = FALSE)
axis(1, dates[day(dates) == 1 & month(dates) %in% c(7)], labels = as.character(year(dates[day(dates) == 15 & month(dates) %in% c(7)])), tick = F, lwd = 0)
axis(2, seq(0, 1.5*max(ger_traffic_sum$mean), 250), las = 2)
# events labels in time series
for(i in seq_along(events_vec)) {
text(ger_traffic_peaks_group$date[i], ger_traffic_sum$mean[ger_traffic_sum$peak == TRUE][i] + 80, i, cex = .8)
points(ger_traffic_peaks_group$date[i], ger_traffic_sum$mean[ger_traffic_sum$peak == TRUE][i] + 80, pch=1, cex = 2.2)
}
# election date
# abline(v = ymd("2017-09-24"), lty = 2, col = "darkgrey")
# events labels explained
par(mar=c(0,0,0,0))
plot(0, 0, xlim = c(0, 5), ylim = c(0, 10), xaxt = "n", yaxt = "n", xlab = "", ylab = "", cex = 0)
positions <- data.frame(events_xpos = 0.45, events_ypos = seq(8.5, (8.5 - .5*length(events_vec)), -.5), text_xpos = .5)
text(0, 9, "Events", pos = 4, cex = .75)
for(i in seq_along(events_vec)) {
text(positions$events_xpos[i], positions$events_ypos[i], i, cex = .8)
points(positions$events_xpos[i], positions$events_ypos[i], pch = 1, cex = 2.2)
text(positions$text_xpos[i], positions$events_ypos[i], events_vec[i], pos = 4, cex = .75)
}
# better: use legislatoR!
dat <- semi_join(x = get_core(legislature = "deu"),
y = filter(get_political(legislature = "deu"), session == 18),
by = "pageid")
warnings()
View(dat)
# better: use legislatoR!
dat <- semi_join(x = get_core(legislature = "deu"),
y = filter(get_political(legislature = "deu"), session == 19),
by = "pageid")
dat$wikititle
lapply(links[[1]]$links, "[", 2) %>% unlist
# get page links (careful: max 500 links)
links_list <- list()
i=1
links <- page_links("de","wikipedia", page = dat$wikititle[i], clean_response = TRUE, limit = 500, namespaces = 0)
links
lapply(links[[1]]$links, "[", 2) %>% unlist
links_list[[i]] <- lapply(links[[1]]$links, "[", 2) %>% unlist
links_list <- list()
for(i in 1:nrow(dat)) {
links <- page_links("de","wikipedia", page = dat$wikititle[i], clean_response = TRUE, limit = 500, namespaces = 0)
links_list[[i]] <- lapply(links[[1]]$links, "[", 2) %>% unlist
}
dat$wikititle
links_list
links_in_pslinks <- seq_along(dat$wikititle)[links_list[[i]] %in% links_list]
i
i=1
length(links_list)
nrow(dat)
## step 2: get page links (max 500 links)
links_list <- list()
for(i in 1:nrow(dat)) {
links <- page_links("de","wikipedia", page = dat$wikititle[i], clean_response = TRUE, limit = 500, namespaces = 0)
links_list[[i]] <- lapply(links[[1]]$links, "[", 2) %>% unlist
}
save(links_list, file = "data/wikipediR/mdb_links_list.RData")
save(links_list, file = "../data/wikipediR/mdb_links_list.RData")
i
links_in_pslinks <- seq_along(dat$wikititle)[links_list[[i]] %in% links_list]
links_in_pslinks
## step 3: identify links between statisticians
# loop preparation
connections <- data.frame(from=NULL, to=NULL)
# loop
for (i in seq_along(dat$wikititle)) {
links_in_pslinks <- seq_along(dat$wikititle)[links_list[[i]] %in% links_list]
links_in_pslinks <- links_in_pslinks[links_in_pslinks!=i]
connections <- rbind(
connections,
data.frame(
from=rep(i-1, length(links_in_pslinks)), # -1 for zero-indexing
to=links_in_pslinks-1 # here too
)
)
}
links_list
seq_along(dat$wikititle)
links_list[[i]]
links_list[[1]]
dat$wikititle
seq_along(dat$wikititle)
links_list[[i]] %in% dat$wikititle
dat$wikititle %in% links_list[[i]]
i
i=1
seq_along(dat$wikititle)[dat$wikititle %in% links_list[[i]]]
## step 3: identify links between statisticians
# loop preparation
connections <- data.frame(from=NULL, to=NULL)
# loop
for (i in seq_along(dat$wikititle)) {
links_in_pslinks <- seq_along(dat$wikititle)[dat$wikititle %in% links_list[[i]]]  ### FIX THIS
links_in_pslinks <- links_in_pslinks[links_in_pslinks != i]
connections <- rbind(
connections,
data.frame(
from=rep(i-1, length(links_in_pslinks)), # -1 for zero-indexing
to=links_in_pslinks-1 # here too
)
)
}
head(connections)
seq_along(dat$wikititle)
## step 3: identify links between statisticians
# loop preparation
connections <- data.frame(from=NULL, to=NULL)
# loop
for (i in seq_along(dat$wikititle)) {
links_in_pslinks <- seq_along(dat$wikititle)[dat$wikititle %in% links_list[[i]]]
links_in_pslinks <- links_in_pslinks[links_in_pslinks != i]
connections <- rbind(
connections,
data.frame(
from=rep(i-1, length(links_in_pslinks)), # -1 for zero-indexing
to=links_in_pslinks-1 # here too
)
)
}
i
connections
dat$wikititle
links_list[[i]]
names(dat)
View(dat)
## step 3: identify links between statisticians
# loop preparation
connections <- data.frame(from=NULL, to=NULL)
# loop
for (i in seq_along(dat$wikititle)) {
links_in_pslinks <- seq_along(dat$wikititle)[str_replace_all(dat$wikititle, "_", " ") %in% links_list[[i]]]
links_in_pslinks <- links_in_pslinks[links_in_pslinks != i]
connections <- rbind(
connections,
data.frame(
from=rep(i-1, length(links_in_pslinks)), # -1 for zero-indexing
to=links_in_pslinks-1 # here too
)
)
}
connections
# results
names(connections) <- c("from", "to")
head(connections)
# make symmetrical
connections <- rbind(
connections,
data.frame(from=connections$to,
to=connections$from)
)
connections <- connections[!duplicated(connections),]
## step 4: visualize connections
connections$value <- 1
nodesDF <- data.frame(name = names, group = 1)
network_out <- forceNetwork(Links = connections, Nodes = nodesDF, Source = "from", Target = "to", Value = "value", NodeID = "name", Group = "group", zoom = TRUE, opacityNoHover = 3)
source("packages.r")
network_out <- forceNetwork(Links = connections, Nodes = nodesDF, Source = "from", Target = "to", Value = "value", NodeID = "name", Group = "group", zoom = TRUE, opacityNoHover = 3)
nodesDF <- data.frame(name = names, group = 1)
## step 4: visualize connections
connections$value <- 1
nodesDF <- data.frame(name = names, group = 1)
## step 3: identify links between statisticians
# loop preparation
connections <- data.frame(from=NULL, to=NULL)
# loop
for (i in seq_along(dat$wikititle)) {
links_in_pslinks <- seq_along(dat$wikititle)[str_replace_all(dat$wikititle, "_", " ") %in% links_list[[i]]]
links_in_pslinks <- links_in_pslinks[links_in_pslinks != i]
connections <- rbind(
connections,
data.frame(
from=rep(i-1, length(links_in_pslinks)), # -1 for zero-indexing
to=links_in_pslinks-1 # here too
)
)
}
# results
names(connections) <- c("from", "to")
head(connections)
# make symmetrical
connections <- rbind(
connections,
data.frame(from=connections$to,
to=connections$from)
)
connections <- connections[!duplicated(connections),]
## step 4: visualize connections
connections$value <- 1
nodesDF <- data.frame(name = names, group = 1)
names
names(dat)
nodesDF <- data.frame(name = dat$name, group = 1)
network_out <- forceNetwork(Links = connections, Nodes = nodesDF, Source = "from", Target = "to", Value = "value", NodeID = "name", Group = "group", zoom = TRUE, opacityNoHover = 3)
saveNetwork(network_out, file = '../data/wikipediR/connections.html')
saveNetwork(network_out, file = '../data/wikipediR/connections.html')
saveNetwork(network_out, file = '../data/connections.html')
saveNetwork(network_out, file = '../data/wikipediR/connections.html')
saveNetwork(network_out, file = '../data/connections.html')
browseURL("../data/connections.html")
## step 7: identify top nodes in data frame
nodesDF$id <- as.numeric(rownames(nodesDF)) - 1
connections_df <- merge(connections, nodesDF, by.x = "to", by.y = "id", all = TRUE)
to_count_df <- count(connections_df, name)
arrange(to_count_df, desc(n))
